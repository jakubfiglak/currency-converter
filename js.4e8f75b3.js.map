{"version":3,"sources":["js/currencies.js","js/api.js","js/calculateRates.js","js/helpers.js","js/convert.js","js/displayData.js","js/index.js"],"names":["currencies","USD","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","ZAR","EUR","generateOptions","Object","entries","map","currencyCode","currencyName","join","formatCurrency","amount","currency","Intl","NumberFormat","style","format","endpoint","getRatesByBase","base","res","fetch","rates","json","err","alert","message","getRatesToCalculate","date","ratesToCalculate","calculate","from","latestData","Date","dayBeforeDate","setDate","getDate","dateFormatted","Array","toISOString","splice","dayBeforeData","today","yesterday","rateRatio","keys","forEach","ratio","convertPercent","decimal","minimumFractionDigits","ratesByBase","convert","to","amountInput","document","querySelector","amountOutput","toSelect","fromSelect","ratesList","rateSelect","displayConversion","value","formatted","textContent","displayRates","todayFormatted","curr","yesterdayFormatted","ratioFormatted","rate","classes","html","el","idx","innerHTML","ratesSelect","form","addEventListener"],"mappings":"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","file":"js.4e8f75b3.js","sourceRoot":"..","sourcesContent":["const currencies = {\r\n  USD: 'United States Dollar',\r\n  AUD: 'Australian Dollar',\r\n  BGN: 'Bulgarian Lev',\r\n  BRL: 'Brazilian Real',\r\n  CAD: 'Canadian Dollar',\r\n  CHF: 'Swiss Franc',\r\n  CNY: 'Chinese Yuan',\r\n  CZK: 'Czech Republic Koruna',\r\n  DKK: 'Danish Krone',\r\n  GBP: 'British Pound Sterling',\r\n  HKD: 'Hong Kong Dollar',\r\n  HRK: 'Croatian Kuna',\r\n  HUF: 'Hungarian Forint',\r\n  IDR: 'Indonesian Rupiah',\r\n  ILS: 'Israeli New Sheqel',\r\n  INR: 'Indian Rupee',\r\n  ISK: 'Icelandic Krona',\r\n  JPY: 'Japanese Yen',\r\n  KRW: 'South Korean Won',\r\n  MXN: 'Mexican Peso',\r\n  MYR: 'Malaysian Ringgit',\r\n  NOK: 'Norwegian Krone',\r\n  NZD: 'New Zealand Dollar',\r\n  PHP: 'Philippine Peso',\r\n  PLN: 'Polish Zloty',\r\n  RON: 'Romanian Leu',\r\n  RUB: 'Russian Ruble',\r\n  SEK: 'Swedish Krona',\r\n  SGD: 'Singapore Dollar',\r\n  THB: 'Thai Baht',\r\n  TRY: 'Turkish Lira',\r\n  ZAR: 'South African Rand',\r\n  EUR: 'Euro',\r\n};\r\n\r\nexport const generateOptions = () =>\r\n  Object.entries(currencies)\r\n    .map(\r\n      ([currencyCode, currencyName]) =>\r\n        `<option value=\"${currencyCode}\">${currencyCode} - ${currencyName}</option>`\r\n    )\r\n    .join('');\r\n\r\nexport const formatCurrency = (amount, currency) =>\r\n  Intl.NumberFormat('en-EN', {\r\n    style: 'currency',\r\n    currency,\r\n  }).format(amount);\r\n","const endpoint = 'https://api.exchangeratesapi.io';\r\n\r\nexport async function getRatesByBase(base) {\r\n  try {\r\n    const res = await fetch(`${endpoint}/latest?base=${base}`);\r\n    const rates = await res.json();\r\n    return rates;\r\n  } catch (err) {\r\n    alert(err.message);\r\n  }\r\n}\r\n\r\nexport async function getRatesToCalculate(base, date) {\r\n  if (!date) {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/latest?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  } else {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/${date}?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  }\r\n}\r\n","import { getRatesToCalculate } from './api';\r\n\r\nconst ratesToCalculate = {};\r\n\r\nexport default async function calculate(from) {\r\n  if (!ratesToCalculate[from]) {\r\n    ratesToCalculate[from] = {};\r\n\r\n    const latestData = await getRatesToCalculate(from);\r\n\r\n    const date = new Date(latestData.date);\r\n    const dayBeforeDate = new Date(date.setDate(date.getDate() - 1));\r\n    const dateFormatted = Array.from(dayBeforeDate.toISOString())\r\n      .splice(0, 10)\r\n      .join('');\r\n    const dayBeforeData = await getRatesToCalculate(from, dateFormatted);\r\n\r\n    ratesToCalculate[from].today = latestData;\r\n    ratesToCalculate[from].yesterday = dayBeforeData;\r\n\r\n    const rateRatio = {};\r\n    Object.keys(latestData.rates).forEach(\r\n      currency =>\r\n        (rateRatio[currency] =\r\n          (latestData.rates[currency] - dayBeforeData.rates[currency]) /\r\n          dayBeforeData.rates[currency])\r\n    );\r\n\r\n    ratesToCalculate[from].ratio = rateRatio;\r\n  }\r\n  return ratesToCalculate;\r\n}\r\n","export function convertPercent(decimal) {\r\n  return Intl.NumberFormat('en-EN', {\r\n    style: 'percent',\r\n    minimumFractionDigits: 2,\r\n  }).format(decimal);\r\n}\r\n","import { getRatesByBase } from './api';\r\n\r\nconst ratesByBase = {};\r\n\r\nexport default async function convert(amount, from, to) {\r\n  if (!ratesByBase[from]) {\r\n    const rates = await getRatesByBase(from);\r\n    ratesByBase[from] = rates;\r\n  }\r\n\r\n  const rate = ratesByBase[from].rates[to];\r\n  return amount * rate;\r\n}\r\n","import convert from './convert';\r\nimport { formatCurrency } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\n\r\nconst amountInput = document.querySelector('#amount-input');\r\nconst amountOutput = document.querySelector('#amount-output');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst ratesList = document.querySelector('#rates-list');\r\n\r\nexport const rateSelect = document.querySelector('#currency');\r\n\r\nexport const displayConversion = async () => {\r\n  const value = await convert(\r\n    amountInput.value,\r\n    fromSelect.value,\r\n    toSelect.value\r\n  );\r\n  const formatted = formatCurrency(value, toSelect.value);\r\n  amountOutput.textContent = `${formatted}`;\r\n};\r\n\r\nexport const displayRates = async () => {\r\n  const currency = rateSelect.value;\r\n  const rates = await calculate(currency);\r\n\r\n  const { today, yesterday, ratio } = rates[currency];\r\n\r\n  const todayFormatted = Object.keys(today.rates).map(curr =>\r\n    formatCurrency(today.rates[curr] * 100, curr)\r\n  );\r\n  const yesterdayFormatted = Object.keys(yesterday.rates).map(curr =>\r\n    formatCurrency(yesterday.rates[curr] * 100, curr)\r\n  );\r\n  const ratioFormatted = Object.keys(ratio).map(rate =>\r\n    convertPercent(ratio[rate])\r\n  );\r\n  const classes = Object.keys(ratio).map(rate =>\r\n    ratio[rate] >= 0 ? 'plus' : 'minus'\r\n  );\r\n\r\n  const html = todayFormatted\r\n    .map(\r\n      (el, idx) => `\r\n    <li class=\"list-item\">\r\n      <p class=\"today\">${today.date}: 100 ${today.base} = ${el}</p>\r\n       <p class=\"diff ${classes[idx]}\">${ratioFormatted[idx]}</p>\r\n      <p class=\"yesterday\">${yesterday.date}: 100 ${yesterday.base} = ${\r\n        yesterdayFormatted[idx]\r\n      }</p>\r\n  </li>\r\n    `\r\n    )\r\n    .join('');\r\n\r\n  ratesList.innerHTML = html;\r\n};\r\n","import { generateOptions } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\nimport { displayConversion, rateSelect, displayRates } from './displayData';\r\n\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst ratesSelect = document.querySelector('#currency');\r\n\r\nconst form = document.querySelector('.converter');\r\n\r\n// getRatesByBase('PLN');\r\n// getRatesToCalculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('USD', 1);\r\n// const percent = convertPercent(0.007576);\r\n// console.log(percent);\r\nconst html = generateOptions();\r\nfromSelect.innerHTML = html;\r\ntoSelect.innerHTML = html;\r\nratesSelect.innerHTML = html;\r\n\r\nform.addEventListener('input', displayConversion);\r\nrateSelect.addEventListener('change', displayRates);\r\n"]}