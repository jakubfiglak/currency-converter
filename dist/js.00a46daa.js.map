{"version":3,"sources":["js/currencies.js","js/api.js","js/calculateRates.js","js/helpers.js","js/convert.js","js/displayData.js","js/index.js"],"names":["currencies","USD","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","ZAR","EUR","generateOptions","Object","entries","map","currencyCode","currencyName","join","formatCurrency","amount","currency","Intl","NumberFormat","style","format","endpoint","getRatesByBase","base","res","fetch","rates","json","err","alert","message","getRatesToCalculate","daysFromNow","today","Date","dayInThePast","setDate","getDate","queryString","Array","from","toISOString","splice","ratesToCalculate","calculate","todayData","yesterdayData","yesterday","rateRatio","keys","forEach","ratio","convertPercent","decimal","minimumFractionDigits","ratesByBase","convert","to","rate","amountInput","document","querySelector","amountOutput","toSelect","fromSelect","ratesList","rateSelect","displayConversion","value","formatted","textContent","displayRates","todayFormatted","curr","yesterdayFormatted","ratioFormatted","classes","html","el","idx","date","innerHTML","ratesSelect","form","addEventListener"],"mappings":";;AMAA;;AACA;;ANDA,AMEA,MNFMA,UAAU,GAAG;ACAnB,ACAA,AEAA,AJCEC,AKDF,AFAO,EHCLA,GAAG,CCDC+C,CDCC,EGDS+B,KFAF,GAAG,MEAV,CAAwBC,KHAZ,EGAZ,EAAiC,iBFAxC;ADEE9E,AGDA,AGEF,ENDEA,GAAG,EAAE,EGDE0C,IAAI,CAACC,YHDK,AGCV,CAAkB,OAAlB,EAA2B;AFC7B,ACAP,AEAA,AJCE1C,AKFF,AFCI2C,EHCF3C,EGDE2C,CHCC,CEDCwB,AEAAY,CJCC,EGDE,EAAE,IFAWjC,EGAL,GAAG,ADDgB,EDCd,AEAtB,AJFmB,GEEM,EAAzB,EDAO,CAA8BC,IAA9B,EAAoC;AACzC,ADCA9C,AGDE6E,EHCF7E,EGDE6E,CHCC,CCDC,CDCC,gBAJY,EGGM,EAAE;AFCvB,ACAW,AEAA,AJCb5E,AKHF,AFDoC,EHIlCA,CGJO,EHIJ,AGDA0C,EHCE,GCDGI,CEHD,CAGG6B,CFAC,ECAiBT,AEAAY,CHAd,GEHP,CAAP,EFGoB/B,AGAP,CAAuBV,CFAvB,AFJI,CEIqByB,EDAb,CAAE,CCAd,AEAA,EHAgBnB,ACAe,AEAAmB,IAA/B,EAAqCiB,EHAZ,AGAzB,EAAyC,cHADlC,IAAK,EAAjC,CAAvB;AACA,ACAF,AEAA,AJCA5C,AGDD,AGAD,ENCEA,GAAG,CEDC,AEAA,AEAAqF,CJACrB,AEAAY,AJCA,GCDG7B,KAAK,CKAC,ELAE,AGAA,CAACc,AEAAoB,CNLA,GEKI,AEAL,CHAMpC,ACAAgB,AEAtB,EAAwB,CHAC,AKAA,CLACb,ACAL,AIAKkC,CJA1B,EAA6B,CDAP,EAApB,OKAe,CAAuB,gBAAvB,CAAnB;ALCI,ACAAlB,AEAA,AJCF/D,AKJF,ACGA,ENCEA,EEDE+D,CFCC,CMDCoB,CNCC,GIDGrC,CHACA,GKAG,CFAC,CHAX,CKAakC,CFAC,EFAE,CAACpB,AFNF,GIMK,CFAJ,AIAK,CJArB,AIAsBqB,GJAG,EAAzB,QIAa,CAAuB,SFADrB,IAAf,CAApB,AEAa,CAAjB;ALCG,ACCC,AEDAe,AJCF1E,AMDF,ENCEA,CCLA,CAIE,AGAA0E,CJCC,CMDC2B,CNCC,GEAGrC,CDDCjB,GAAP,CGAW,CHAC,AGAAY,CEAC,EJCE,CEDJ,AEAKoB,CFAhB,CFCkB,EEDElC,IFCI,AIDA,CFAxB,AEAyBmC,CNPV,YMOC,CAAuB,WAAvB,CAApB,GJCgDrB,IAApB,CAAxB;ADAAX,ACCA,AEDD,AJCD/C,AMAF,ENAEA,ECDE+C,CDCC,CMACsD,CNAC,ECDE,CAACvD,ACCAkB,AIAA,GLDG,AKCAc,CLDC9B,OAAL,ADRU,AMSE,CLDjB,AKCkB+B,CJAC,GAAG,MAAM,GIAnB,CAAuB,YAAvB,CAAb,EAEA,WJFoDrB,IAApB,EAA0B,CAA1B,CAA5B;ADAD,ACECG,AFDF5D,AMEF,ENFEA,EECE4D,CFDC,EAAE,aECa,CAACH,IAAD,CAAhB,CAAuBP,IFXR,CEWf,GAA+BY,SAA/B;ADDH,ACEGF,AEFF,AJCA3D,AKNF,ACQA,ENFEA,EECE2D,CFDC,CKNCgB,CLMC,CIDCD,IAAI,GAAGH,ECLE,GHOG,AGPAK,CHOCpB,IAAD,AFZD,CEYf,AEFsB,CFECO,AEFAP,CCLC,CAACqB,EDKH,CAAX,CAAkBnC,GFE7B,EEFW,CFEwBoB,AEFAW,EAAxB,CAAb,ACLkB,CAAuB,SHOvC,MGPgB,CAApB;AHSI,AEHF,AJCAxE,AKNF,ACQA,ENFEA,GAAG,CKNC6E,CLMC,EIDE/C,CFGCiC,KEHK,GAAGU,ACLA,CHQC,EGREE,CHQC,AEHpB,AJXiB,EEcf,KGRyB,CAACC,aAAT,CAAuB,gBAAvB,CAArB;AJMO,ACGHrD,AEHH,AJCCtB,AKNF,ACQA,ENFEA,EEEEsB,CFFC,CKNCuD,CLMC,GEEG,CAACd,GGRG,CJKQlB,ACGlB,CAAYc,CGRCe,QHQQ,AFfN,AKOM,CHQClC,AGRAmC,KHQtB,EAA6BX,CDH1B,CAAmC3B,IAAnC,AILU,CHQb,AGRoC,CJKQS,ACI1ChB,QAAQ,GDJP,CCKEgC,CDLoD,AIL5C,CAAjB,OHUkB,CAAChC,QAAD,CAAT,GACC,CAAC6B,SAAS,CAACnB,KAAV,CAAgBV,QAAhB,IAA4B8B,aAAa,CAACpB,KAAd,CAAoBV,QAApB,CAA7B,IACA8B,aAAa,CAACpB,KAAd,CAAoBV,QAApB,CAJN;ADFF,ACSE2B,AFRFxD,AKNF,ACQA,ENFEA,EEQEwD,CFRC,CCDC,AILAqB,CJKChC,ADCA,SKNS,EJKd,CILiB4B,CJKC,ACSA,CAACpB,IAAD,CAAhB,AFtBe,CEsBQW,AGdA,CAACU,IHcxB,GAA+Bb,MGdhB,CAAuB,EHctC,cGde,CAAnB;AJMI,ACSD,AFRD5D,AKNF,ACQA,ENFEA,GAAG,CKNC6E,CLMC,CCDC,OILO,GAAGL,QAAQ,CLTP,AKSQC,aAAT,CAAuB,aAAvB,CAAlB;AJMM,ADCJxE,AKLK,ELKLA,GAAG,CKLQ6E,CLKN,KCDK1C,GAAG,CIJQ,EJIL,CIJQoC,ELXP,GCeKnC,GIJU,CAACoC,CJIN,CACpB,GAAExC,QAAS,AILM,CAAuB,WAAvB,CAAnB,GJK4BE,IAAK,0BADX,CAAvB;AAGA,ACMJ,AFPAjC,AMCF,ENDEA,GAAG,CMCCuF,CNDC,EEOElC,CINC,ELAEjB,CKAC,ILAI,GAAG,IDlBD,CEwBjB,CDNwBF,GAAG,CAACG,IAAJ,EAApB,CAJE,CAKF,SKDN;AJOC,AFPCpC,AMCFyE,ENDEzE,GAAG,EAAE,GMCG,CAAC0F,SAAX,CNnBmB,EMmBIJ,IAAvB;ALCM,ADDJrF,AKNK,ACOPuE,ENDEvE,GAAG,CKNQ2E,CLMN,CMCC,CAACc,ILAIvD,KAAP,AKAN,GAAqBmD,EDPS,ELbX,AMoBnB,CDPiC,YAAY;AJQxC,ADDHpF,AKNA,ACOFyF,ENDEzF,GCNE,ADMC,CCCC,CDDC,CKNC2E,GCOG,CAACa,CLACrD,AIPA,GJOP,AIPU,EJOE,GDrBC,AMqBnB,CDPsB,ECOEiD,IAAxB,gBDNIlB,WAAW,CAACS,KADM,EAElBJ,UAAU,CAACI,KAFO,EAGlBL,QAAQ,CAACK,KAHS,CAApB;AJQIvC,ADDJnC,AKFA,ACIFyF,ENFEzF,EMEE,CNFC,AMEA0F,CLDCvD,CDDC,CKFCwC,GJGG,CAACzC,GAAG,CAACE,CIHC,GAAG,CCIpB,CAAsB,CLDX,CAAL,EDtBa,GMuBnB,EAA+BqC,qBDJIC,KAAf,EAAsBL,ECI1C,MDJkD,CAACK,KAA/B,CAAlB;AJIG,ADDHzE,AKFAmE,ELEAnE,AKFAmE,GLEG,EAAE,OKFO,CAACQ,SLpBI,EKoBjB,GAA4B,GAAED,SAAU,EAAxC;AJIC,ADDDzE,AKFD,ACGDsE,CDXO,CLULtE,CCVA,EDUG,EAAE,ECCE,IAAIoC,WAAW,AKAboD,GLAgB,ADxBR,CCwBV,EAAqB,UKA9B,CAA4B,QAA5B,EAAsCb,yBAAtC;ALCI,ADDF1E,EAAAA,GAAG,EAAE,GCCGoC,KAAK,GAAG,IAAIC,EDzBH,ECyBD,EAAd;AACA,ADDFpC,EAAAA,GAAG,EAAE,GCCGqC,WD1BS,CC0BG,GAAG,IAAID,IAAJ,CAASD,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAkBL,WAAhC,CAAT,CAArB;AACA,ADDFjC,EAAAA,GAAG,EAAE,GCCGuC,WAAW,AD3BF,GC2BKC,KAAK,CAACC,IAAN,CAAWL,YAAY,CAACM,WAAb,EAAX,EACjBC,MADiB,CACV,CADU,EACP,EADO,EAEjB7B,IAFiB,CAEZ,EAFY,CAApB;ADAFb,AKJK,ELILA,GAAG,CKJQuE,CLIN,WKJkB,GAAG,CLvBT,WKuBqB;AJQpC,ADHFtE,AKJA,ELIAA,GAAG,EAAE,CCGC,AIPAe,QAAQ,GAAGkD,GLxBA,OKwBU,CAACE,KAA5B;AJQI,ADHJlE,AKJA,ELIAA,GAAG,EAAE,CKJCwB,IJOIF,CIPC,EJOE,CIPC,EJOE,IIPI,EJOEC,CDhCL,ICgCU,CACpB,GAAEJ,QAAS,IAAGiB,MIRStB,KJQG,GIRb,CAApB,KJQyCO,IAAK,0BADnB,CAAvB;AAGA,ADLJpB,AKHA,ELGAA,GAAG,EAAE,CKHC,IJQIuB,KAAK,CDnCE,ECmCC,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAJE,CAKF;ADLJvB,AKJQ6B,ELIR7B,EKJQ6B,CLIL,EAAE,EKJC,YL3BW;ACqCb,ADLJ5B,AKLe0C,ELKf1C,EKLe0C,CLKZ,EAAE,MCKMrB,AIVL,KJUF,SDrCa;ACsCd,ADLHpB,AKN0B6C,ELM1B7C,EKN0B6C,CJIxB,ADEC,CCKC,CDLC,MCKMvB,GAAP,EAAY;AACZC,ADvCa,AK2BX,CL3BR,KCuCMA,AIZgCH,KJY3B,AIZgC,CJY/BE,AIZgCZ,GJY7B,CAACc,IIZ2B,CAAzC,EJYS,CAAL;AACD,AIXH,QAAM0C,cAAc,GAAGhE,MAAM,CAACyC,IAAP,CAAYhB,KAAK,CAACP,KAAlB,EAAyBhB,GAAzB,CAA6B+D,IAAI,IACtD,gCAAexC,KAAK,CAACP,KAAN,CAAY+C,IAAZ,IAAoB,GAAnC,EAAwCA,IAAxC,CADqB,CAAvB;AJYC,ADLI,AKJL,MLIWlE,EKJLmE,aLIoB,GAAG,EKJL,GAAGlE,CLK3BA,KKLiC,CLK3B,AKL4ByC,CLK3BxC,GKLoB,CAAYsC,GLKvC,CAAe1E,KKLiC,CAACqD,ILKjD,CKL2B,CLMxBhB,CKNqDA,ELKxD,CAEI,AKPuB,CLOtB,AKPuD+D,CLOtD9D,GKP0D,IAC9D,KLMG,EAAeC,YAAf,CAAD,KACG,OKPUmC,SAAS,CAACrB,CLOHf,IKPP,CAAgB8D,IAAhB,GLOoB,CKPI,GAAvC,CLOuC9D,CKPK8D,IAA5C,CADyB,CAA3B,KLQsD,MAAK7D,YAAa,WAHxE,EAKGC,IALH,CAKQ,EALR,CADK;ACMN,AIPC,QAAM8D,cAAc,GAAGnE,MAAM,CAACyC,IAAP,CAAYE,KAAZ,EAAmBzC,GAAnB,CAAuBgD,IAAI,IAChD,6BAAeP,KAAK,CAACO,IAAD,CAApB,CADqB,CAAvB;AAGA,QAAMkB,OAAO,GAAGpE,MAAM,CAACyC,IAAP,CAAYE,KAAZ,EAAmBzC,GAAnB,CAAuBgD,IAAI,IACzCP,KAAK,CAACO,IAAD,CAAL,IAAe,CAAf,GAAmB,MAAnB,GAA4B,OADd,CAAhB;AAIA,QAAMmB,IAAI,GAAGL,cAAc,CACxB9D,GADU,CAET,CAACoE,EAAD,EAAKC,GAAL,KAAc;ALAb,MAAMjE,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAC5BC,IAAI,CAACC,YAAL,CAAkB,OAAlB,EAA2B;AACzBC,EAAAA,KAAK,EAAE,UADkB,MKCJc,KAAK,CAAC+C,IAAK,SAAQ/C,KAAK,CAACV,IAAK,MAAKuD,EAAG;ALC3D9D,EAAAA,sBKAoB4D,OAAO,CAACG,GAAD,CAAM,KAAIJ,cAAc,CAACI,GAAD,CAAM;ALFhC,CAA3B,EAGG3D,MAHH,CAGUL,MAHV,CADK,YKIsBgC,SAAS,CAACiC,IAAK,SAAQjC,SAAS,CAACxB,IAAK,MAC3DmD,kBAAkB,CAACK,GAAD,CACnB;;KARQ,EAYVlE,IAZU,CAYL,EAZK,CAAb;AAcAoD,EAAAA,SAAS,CAACgB,SAAV,GAAsBJ,IAAtB;AACD,CAlCM","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["const currencies = {\r\n  USD: 'United States Dollar',\r\n  AUD: 'Australian Dollar',\r\n  BGN: 'Bulgarian Lev',\r\n  BRL: 'Brazilian Real',\r\n  CAD: 'Canadian Dollar',\r\n  CHF: 'Swiss Franc',\r\n  CNY: 'Chinese Yuan',\r\n  CZK: 'Czech Republic Koruna',\r\n  DKK: 'Danish Krone',\r\n  GBP: 'British Pound Sterling',\r\n  HKD: 'Hong Kong Dollar',\r\n  HRK: 'Croatian Kuna',\r\n  HUF: 'Hungarian Forint',\r\n  IDR: 'Indonesian Rupiah',\r\n  ILS: 'Israeli New Sheqel',\r\n  INR: 'Indian Rupee',\r\n  ISK: 'Icelandic Krona',\r\n  JPY: 'Japanese Yen',\r\n  KRW: 'South Korean Won',\r\n  MXN: 'Mexican Peso',\r\n  MYR: 'Malaysian Ringgit',\r\n  NOK: 'Norwegian Krone',\r\n  NZD: 'New Zealand Dollar',\r\n  PHP: 'Philippine Peso',\r\n  PLN: 'Polish Zloty',\r\n  RON: 'Romanian Leu',\r\n  RUB: 'Russian Ruble',\r\n  SEK: 'Swedish Krona',\r\n  SGD: 'Singapore Dollar',\r\n  THB: 'Thai Baht',\r\n  TRY: 'Turkish Lira',\r\n  ZAR: 'South African Rand',\r\n  EUR: 'Euro',\r\n};\r\n\r\nexport const generateOptions = () =>\r\n  Object.entries(currencies)\r\n    .map(\r\n      ([currencyCode, currencyName]) =>\r\n        `<option value=\"${currencyCode}\">${currencyCode} - ${currencyName}</option>`\r\n    )\r\n    .join('');\r\n\r\nexport const formatCurrency = (amount, currency) =>\r\n  Intl.NumberFormat('en-EN', {\r\n    style: 'currency',\r\n    currency,\r\n  }).format(amount);\r\n","const endpoint = 'https://api.exchangeratesapi.io';\r\n\r\nexport async function getRatesByBase(base) {\r\n  try {\r\n    const res = await fetch(`${endpoint}/latest?base=${base}`);\r\n    const rates = await res.json();\r\n    return rates;\r\n  } catch (err) {\r\n    alert(err.message);\r\n  }\r\n}\r\n\r\nexport async function getRatesToCalculate(base, daysFromNow) {\r\n  if (!daysFromNow) {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/latest?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      // console.log(rates);\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  } else if (daysFromNow > 0) {\r\n    const today = new Date();\r\n    const dayInThePast = new Date(today.setDate(today.getDate() - daysFromNow));\r\n    const queryString = Array.from(dayInThePast.toISOString())\r\n      .splice(0, 10)\r\n      .join('');\r\n\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/${queryString}?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      // console.log(rates);\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  }\r\n}\r\n","import { getRatesToCalculate } from './api';\r\n\r\nconst ratesToCalculate = {};\r\n\r\nexport default async function calculate(from) {\r\n  if (!ratesToCalculate[from]) {\r\n    ratesToCalculate[from] = {};\r\n\r\n    const todayData = await getRatesToCalculate(from);\r\n    const yesterdayData = await getRatesToCalculate(from, 1);\r\n\r\n    ratesToCalculate[from].today = todayData;\r\n    ratesToCalculate[from].yesterday = yesterdayData;\r\n\r\n    const rateRatio = {};\r\n    Object.keys(todayData.rates).forEach(\r\n      currency =>\r\n        (rateRatio[currency] =\r\n          (todayData.rates[currency] - yesterdayData.rates[currency]) /\r\n          yesterdayData.rates[currency])\r\n    );\r\n\r\n    ratesToCalculate[from].ratio = rateRatio;\r\n  }\r\n  return ratesToCalculate;\r\n}\r\n","export function convertPercent(decimal) {\r\n  return Intl.NumberFormat('en-EN', {\r\n    style: 'percent',\r\n    minimumFractionDigits: 2,\r\n  }).format(decimal);\r\n}\r\n","import { getRatesByBase } from './api';\r\n\r\nconst ratesByBase = {};\r\n\r\nexport default async function convert(amount, from, to) {\r\n  if (!ratesByBase[from]) {\r\n    const rates = await getRatesByBase(from);\r\n    ratesByBase[from] = rates;\r\n  }\r\n\r\n  const rate = ratesByBase[from].rates[to];\r\n  return amount * rate;\r\n}\r\n","import convert from './convert';\r\nimport { formatCurrency } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\n\r\nconst amountInput = document.querySelector('#amount-input');\r\nconst amountOutput = document.querySelector('#amount-output');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst ratesList = document.querySelector('#rates-list');\r\n\r\nexport const rateSelect = document.querySelector('#currency');\r\n\r\nexport const displayConversion = async () => {\r\n  const value = await convert(\r\n    amountInput.value,\r\n    fromSelect.value,\r\n    toSelect.value\r\n  );\r\n  const formatted = formatCurrency(value, toSelect.value);\r\n  amountOutput.textContent = `${formatted}`;\r\n};\r\n\r\nexport const displayRates = async () => {\r\n  const currency = rateSelect.value;\r\n  const rates = await calculate(currency);\r\n\r\n  const { today, yesterday, ratio } = rates[currency];\r\n\r\n  const todayFormatted = Object.keys(today.rates).map(curr =>\r\n    formatCurrency(today.rates[curr] * 100, curr)\r\n  );\r\n  const yesterdayFormatted = Object.keys(yesterday.rates).map(curr =>\r\n    formatCurrency(yesterday.rates[curr] * 100, curr)\r\n  );\r\n  const ratioFormatted = Object.keys(ratio).map(rate =>\r\n    convertPercent(ratio[rate])\r\n  );\r\n  const classes = Object.keys(ratio).map(rate =>\r\n    ratio[rate] >= 0 ? 'plus' : 'minus'\r\n  );\r\n\r\n  const html = todayFormatted\r\n    .map(\r\n      (el, idx) => `\r\n    <li class=\"list-item\">\r\n      <p class=\"today\">${today.date}: 100 ${today.base} = ${el}</p>\r\n       <p class=\"diff ${classes[idx]}\">${ratioFormatted[idx]}</p>\r\n      <p class=\"yesterday\">${yesterday.date}: 100 ${yesterday.base} = ${\r\n        yesterdayFormatted[idx]\r\n      }</p>\r\n  </li>\r\n    `\r\n    )\r\n    .join('');\r\n\r\n  ratesList.innerHTML = html;\r\n};\r\n","import { generateOptions } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\nimport { displayConversion, rateSelect, displayRates } from './displayData';\r\n\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst ratesSelect = document.querySelector('#currency');\r\n\r\nconst form = document.querySelector('.converter');\r\n\r\n// getRatesByBase('PLN');\r\n// getRatesToCalculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('USD', 1);\r\n// const percent = convertPercent(0.007576);\r\n// console.log(percent);\r\nconst html = generateOptions();\r\nfromSelect.innerHTML = html;\r\ntoSelect.innerHTML = html;\r\nratesSelect.innerHTML = html;\r\n\r\nform.addEventListener('input', displayConversion);\r\nrateSelect.addEventListener('change', displayRates);\r\n"]}