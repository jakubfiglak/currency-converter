{"version":3,"sources":["js/currencies.js","js/api.js","js/calculateRates.js","js/helpers.js","js/convert.js","js/displayData.js","js/index.js"],"names":["currencies","USD","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","ZAR","EUR","generateOptions","Object","entries","map","currencyCode","currencyName","join","formatCurrency","amount","currency","Intl","NumberFormat","style","format","endpoint","getRatesByBase","base","res","fetch","rates","json","err","alert","message","getRatesToCalculate","daysFromNow","today","Date","dayInThePast","setDate","getDate","queryString","Array","from","toISOString","splice","ratesToCalculate","calculate","todayData","yesterdayData","console","log","yesterday","rateRatio","keys","forEach","ratio","convertPercent","decimal","minimumFractionDigits","ratesByBase","convert","to","rate","converted","amountInput","document","querySelector","amountOutput","toSelect","fromSelect","ratesList","rateSelect","displayConversion","value","formatted","textContent","displayRates","todayFormatted","curr","yesterdayFormatted","ratioFormatted","classes","html","el","idx","date","innerHTML","ratesSelect","form","addEventListener"],"mappings":";;AMAA;;AACA;;ANDA,AMEA,MNFMA,UAAU,GAAG;ACAnB,ACAA,AEAA,AJCEC,AKDF,AFAO,EHCLA,GAAG,CCDC+C,CDCC,EGDSiC,KFAF,GAAG,MEAV,CAAwBC,KHAZ,EGAZ,EAAiC,iBFAxC;ADEEhF,AGDA,AGEF,ENDEA,GAAG,EAAE,EGDE0C,IAAI,CAACC,YHDK,AGCV,CAAkB,OAAlB,EAA2B;AFC7B,ACAP,AEAA,AJCE1C,AKFF,AFCI2C,EHCF3C,EGDE2C,CHCC,CEDCwB,AEAAc,CJCC,EGDE,EAAE,IFAWnC,EGAL,GAAG,ADDgB,EDCd,AEAtB,AJFmB,GEEM,EAAzB,EDAO,CAA8BC,IAA9B,EAAoC;AACzC,ADCA9C,AGDE+E,EHCF/E,EGDE+E,CHCC,CCDC,CDCC,gBAJY,EGGM,EAAE;AFCvB,ACAW,AEAA,AJCb9E,AKHF,AFDoC,EHIlCA,CGJO,EHIJ,AGDA0C,EHCE,GCDGI,CEHD,CAGG+B,CFAC,ECAiBX,AEAAc,CHAd,GEHP,CAAP,EFGoBjC,AGAP,CAAuBV,CFAvB,AFJI,CEIqByB,EDAb,CAAE,CCAd,AEAA,EHAgBnB,ACAe,AEAAmB,IAA/B,EAAqCmB,EHAZ,AGAzB,EAAyC,cHADpC,IAAK,EAAjC,CAAvB;AACA,ACAF,AEAA,AJCA5C,AGDD,AGAD,ENCEA,GAAG,CEDC,AEAA,AEAAwF,CJACxB,AEAAc,AJCA,GCDG/B,KAAK,CKAC,ELAE,AGAA,CAACc,AEAAuB,CNLA,GEKI,AEAL,CHAMvC,ACAAgB,AEAtB,EAAwB,CHAC,AKAA,CLACb,ACAL,AIAKqC,CJA1B,EAA6B,CDAP,EAApB,OKAe,CAAuB,gBAAvB,CAAnB;ALCI,ACAArB,AEAAI,AJCFnE,AKJF,ACGA,ENCEA,EEDE+D,AEAAI,CJCC,CMDCmB,CNCC,ICDIxC,AGAA,CAACsB,EEAE,CFAV,CHAA,AGAa,CEAAe,GJAG,CAACvB,AFNF,IEMC,AIAK,CJArB,AIAsBwB,GJAG,EAAzB,QIAa,CAAuB,cAAvB,CAAjB,qBFAI;AHCD,ACCC,AEDA,AJCFnF,AMDF,ENCEA,CCLA,CAIE,CDCC,CMDCwG,CNCC,GEAGxC,AEDAnB,CHACE,GAAP,CGAW,CHAC,CKAC,CFAC,CFCC,CIDCmC,EJCE,EEDE,IFCI,AIDA,CAACC,CNPV,YMOC,CAAuB,MFAJxB,IAAf,CAApB,AEAgB,CAApB,GJCgDA,IAApB,CAAxB;ADAAX,ACCA,AEDA4B,AJCF3E,AMAF,ENAEA,ECDE+C,AGAA4B,CJCC,CMAC6B,CNAC,ECDE,CAAC1D,ACCAkB,AIAA,GLDG,AKCAiB,CLDCjC,CGAC,CAACU,IAAD,CHAN,AGAL,AJRe,AMSE,CLDjB,AKCkBwB,CJAC,CEDCtC,EFCE,GEDtB,GFC4B,GIAnB,CAAuB,YAAvB,CAAb,EAEA,WJFoDc,IAApB,EAA0B,CAA1B,CAA5B;ADAD,ACECO,AEFAA,AJCFhE,AMEF,ENFEA,EECEgE,AEFAA,CJCC,EAAE,IECI,AEFA,CFECC,AEFAA,GFER,AEFA,CFEYL,AEFAc,WAAZ,IJTe,CEWa,CAACjB,IAAD,CAA5B;ADDH,ACGGG,AEHD,AJCD3D,AKNF,ACQA,ENFEA,EEEE2D,CFFC,CKNCmB,CLMC,UKNU,GHQG,AGRAC,CHQCvB,IAAD,AFbD,CEaf,CAAuBP,CGRC,CAAC+B,GHQzB,GAA+BnB,OGRf,CAAuB,CHQvC,cGRgB,CAApB;AHSIF,AFFF1D,AKNF,ACQA,ENFEA,EEEE0D,CFFC,CKNCsB,CLMC,WKNW,EHQE,CAACzB,AGRAuB,CLNF,GEcC,CAAhB,CAAuBd,EGRE,CAACe,MHQ1B,GAAmClB,IGRlB,CAAuB,QHQxC,QGRiB,CAArB;AJMO,ACIH,AEJF,AJCA5D,AKNF,ACQA,ENFEA,GAAG,CKNCgF,CLMC,CIDCN,EFIEV,EEJE,ECLE,CJKQnB,AGAP0B,ECLEM,EHSE,GAAG,EAAlB,CFhBe,AKOM,CDKC,ACLAC,CDKCxB,IAAD,CAAX,CAAkBd,CHA1B,CAAmCH,GGA3B,CHAR,AGAgCoC,ACLtB,CAAuB,CJKQ3B,AGAjC,CAAb,UHAK,EAAsD,AIL5C,CAAjB;AJME,ACIExB,AEJF,AJCArB,AKNF,ACQA,ENFEA,EEGEqB,CFHC,CCDC,AILA2D,CJKCnC,ADCA,CIDC6B,EFIE,CAACV,IAAP,CAAYN,AGTA,CDKC,CHAf,CILiBkB,CJKC,AGAAhD,KFIK,CAACW,AEJA,AJbP,CKQQ,CAACsC,CDKCJ,EFIzB,EAA6BR,AEJ/B,OFIE,CACEpC,AGVa,CAAuB,OHU5B,IACLkC,KGXU,CAAnB,GHWkB,CAAClC,QAAD,CAAT,GACC,CAAC6B,SAAS,CAACnB,KAAV,CAAgBV,QAAhB,IAA4B8B,aAAa,CAACpB,KAAd,CAAoBV,QAApB,CAA7B,IACA8B,aAAa,CAACpB,KAAd,CAAoBV,QAApB,CAJN;ADHA,ACUA2B,AEVFI,AJCA3D,AKNF,ACQA,EFHE2D,AJCA3D,EESEuD,CFTC,CKNCyB,CLMC,CCDC,CGAC,CAACpB,GAAR,CAAa,CCLA,EDKEjC,CCLCgD,EHeE,CAACvB,EEVG,EFUJ,CAAhB,AGfsB,CHeCa,AFxBR,AKSQW,GDKGxB,EFU1B,EEV+B,CFUAU,KGfjB,CDKuBW,ACLA,GHerC,MEV+C,ICLjC,CAAlB,EDKyDF,EAAG,EAA1D;AHCI,ACUFZ,AEVF,AJCA1D,AKNK,ELMLA,EESE0D,CFTC,CKNQsB,CLMN,EIDEtD,EFUE,CDVCS,ACUAwB,GDVG,ACUX,AEVW,CFUCL,AGfO,EJKL,AGAAiB,CCLQG,ELVP,CIejB,EHAsBtC,GILU,CAACuC,CJKN,CACpB,ECSL,CDTO3C,QAAS,AINM,CAAuB,WAAvB,CAAnB,GJM4BE,IAAK,0BADX,CAAvB;AAGA,ACQH,AEVF,AJCCjC,AMCF,ENDEA,GAAG,CMCC0F,CNDC,GMCG,ELAEtD,CKAC,ILAI,GAAG,IDlBD,ECkBOF,GAAG,CAACG,IAAJ,EAApB,CAJE,CAKF,SKDN;ANAEpC,AMCF4E,ENDE5E,GAAG,EAAE,GMCG,CAAC6F,SAAX,CNnBmB,EMmBIJ,IAAvB;ALCM,ACOJ,AFRAxF,AKPK,ACQP0E,ENDE1E,GAAG,CKPQ8E,CLON,CMCC,CJOC3B,AIPAyC,ILAI1D,KAAP,AKAN,GAAqBsD,EDRS,EHe5B,AF3BiB,AMoBnB,CDRiC,YAAY;AJSxC,ACOJ,AFRCvF,AKPA,ACQF4F,ENDE5F,GCNE,ADMC,CCCC,CDDC,CKPC8E,GCQG,CAACa,CLACxD,AIRA,GJQP,AIRU,EJQE,GDrBC,AMqBnB,CDRsB,ECQEoD,IAAxB,gBDPIlB,WAAW,CAACS,KADM,EAElBJ,UAAU,CAACI,KAFO,EAGlBL,QAAQ,CAACK,KAHS,CAApB;AJSI1C,ADDJnC,AKHA,ACKF4F,ENFE5F,EMEE,CNFC,AMEA6F,CLDC1D,CDDC,CKHC2C,GJIG,CAAC5C,GAAG,CAACE,CIJC,GAAG,CCKpB,CAAsB,CLDX,CAAL,EDtBa,GMuBnB,EAA+BwC,qBDLIC,KAAf,EAAsBL,ECK1C,MDLkD,CAACK,KAA/B,CAAlB;AJKG,ADDH5E,AKHAoD,ELGApD,AKHAoD,GLGG,EAAE,EKHE,CAACC,GAAR,CAAYwB,SAAZ,CLnBiB;ACwBhB,ADDD5E,AKHAqE,ACIFI,ENDEzE,AKHAqE,CJPA,EDUG,EAAE,ECCE,IAAIjC,CIJC,CAACyC,SJIS,AKAbc,EDJT,CJIyB,ADxBR,CCwBV,CIJqB,CJIA,EIJEf,QCIhC,CDJ0C,ACId,EDJ1B,MCIF,EAAsCE,yBAAtC;ALCI,ADDF7E,AKHD,CATM,CLYLA,GAAG,EAAE,GCCGoC,KAAK,GAAG,IAAIC,EDzBH,ECyBD,EAAd;AACA,ADDFpC,EAAAA,GAAG,EAAE,GCCGqC,WD1BS,CC0BG,GAAG,IAAID,IAAJ,CAASD,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAkBL,WAAhC,CAAT,CAArB;AACA,ADDFjC,EAAAA,GAAG,EAAE,GCCGuC,WAAW,AD3BF,GC2BKC,KAAK,CAACC,IAAN,CAAWL,YAAY,CAACM,WAAb,EAAX,EACjBC,MADiB,CACV,CADU,EACP,EADO,EAEjB7B,IAFiB,CAEZ,EAFY,CAApB;ADAFb,EAAAA,GAAG,EAAE,eA3BY;AC+Bf,ADHFC,AKLK,ELKLA,GAAG,CKLQyE,CLKN,CCGC,UIRiB,GAAG,CLvBT,WKuBqB;AJSlC,ADHJxE,AKLA,ELKAA,GAAG,EAAE,CKLCc,IJQIQ,GAAG,CIRC,EJQE,CIRC6C,KJQK5C,CDhCL,ICgCU,AIRA,CJSpB,AITqB8C,GJSnBlD,EITT,MJSkB,IAAGiB,WAAY,SAAQf,IAAK,0BADnB,CAAvB;AAGA,ADLJpB,AKLA,ELKAA,GAA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","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["const currencies = {\r\n  USD: 'United States Dollar',\r\n  AUD: 'Australian Dollar',\r\n  BGN: 'Bulgarian Lev',\r\n  BRL: 'Brazilian Real',\r\n  CAD: 'Canadian Dollar',\r\n  CHF: 'Swiss Franc',\r\n  CNY: 'Chinese Yuan',\r\n  CZK: 'Czech Republic Koruna',\r\n  DKK: 'Danish Krone',\r\n  GBP: 'British Pound Sterling',\r\n  HKD: 'Hong Kong Dollar',\r\n  HRK: 'Croatian Kuna',\r\n  HUF: 'Hungarian Forint',\r\n  IDR: 'Indonesian Rupiah',\r\n  ILS: 'Israeli New Sheqel',\r\n  INR: 'Indian Rupee',\r\n  ISK: 'Icelandic Krona',\r\n  JPY: 'Japanese Yen',\r\n  KRW: 'South Korean Won',\r\n  MXN: 'Mexican Peso',\r\n  MYR: 'Malaysian Ringgit',\r\n  NOK: 'Norwegian Krone',\r\n  NZD: 'New Zealand Dollar',\r\n  PHP: 'Philippine Peso',\r\n  PLN: 'Polish Zloty',\r\n  RON: 'Romanian Leu',\r\n  RUB: 'Russian Ruble',\r\n  SEK: 'Swedish Krona',\r\n  SGD: 'Singapore Dollar',\r\n  THB: 'Thai Baht',\r\n  TRY: 'Turkish Lira',\r\n  ZAR: 'South African Rand',\r\n  EUR: 'Euro',\r\n};\r\n\r\nexport const generateOptions = () =>\r\n  Object.entries(currencies)\r\n    .map(\r\n      ([currencyCode, currencyName]) =>\r\n        `<option value=\"${currencyCode}\">${currencyCode} - ${currencyName}</option>`\r\n    )\r\n    .join('');\r\n\r\nexport const formatCurrency = (amount, currency) =>\r\n  Intl.NumberFormat('en-EN', {\r\n    style: 'currency',\r\n    currency,\r\n  }).format(amount);\r\n","const endpoint = 'https://api.exchangeratesapi.io';\r\n\r\nexport async function getRatesByBase(base) {\r\n  try {\r\n    const res = await fetch(`${endpoint}/latest?base=${base}`);\r\n    const rates = await res.json();\r\n    return rates;\r\n  } catch (err) {\r\n    alert(err.message);\r\n  }\r\n}\r\n\r\nexport async function getRatesToCalculate(base, daysFromNow) {\r\n  if (!daysFromNow) {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/latest?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      // console.log(rates);\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  } else if (daysFromNow > 0) {\r\n    const today = new Date();\r\n    const dayInThePast = new Date(today.setDate(today.getDate() - daysFromNow));\r\n    const queryString = Array.from(dayInThePast.toISOString())\r\n      .splice(0, 10)\r\n      .join('');\r\n\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/${queryString}?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      // console.log(rates);\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  }\r\n}\r\n","import { getRatesToCalculate } from './api';\r\n\r\nconst ratesToCalculate = {};\r\n\r\nexport default async function calculate(from) {\r\n  if (!ratesToCalculate[from]) {\r\n    ratesToCalculate[from] = {};\r\n\r\n    const todayData = await getRatesToCalculate(from);\r\n    const yesterdayData = await getRatesToCalculate(from, 1);\r\n\r\n    console.log(ratesToCalculate[from]);\r\n\r\n    ratesToCalculate[from].today = todayData;\r\n    ratesToCalculate[from].yesterday = yesterdayData;\r\n\r\n    const rateRatio = {};\r\n    Object.keys(todayData.rates).forEach(\r\n      currency =>\r\n        (rateRatio[currency] =\r\n          (todayData.rates[currency] - yesterdayData.rates[currency]) /\r\n          yesterdayData.rates[currency])\r\n    );\r\n\r\n    ratesToCalculate[from].ratio = rateRatio;\r\n    console.log(ratesToCalculate);\r\n  }\r\n  return ratesToCalculate;\r\n}\r\n","export function convertPercent(decimal) {\r\n  return Intl.NumberFormat('en-EN', {\r\n    style: 'percent',\r\n    minimumFractionDigits: 2,\r\n  }).format(decimal);\r\n}\r\n","import { getRatesByBase } from './api';\r\n\r\nconst ratesByBase = {};\r\n\r\nexport default async function convert(amount, from, to) {\r\n  if (!ratesByBase[from]) {\r\n    console.log(`we don't have rates for this currency, I have to fetch it!`);\r\n    const rates = await getRatesByBase(from);\r\n    ratesByBase[from] = rates;\r\n    console.log(ratesByBase);\r\n  }\r\n\r\n  const rate = ratesByBase[from].rates[to];\r\n  const converted = amount * rate;\r\n  console.log(`${amount} in ${from} is ${converted} in ${to}`);\r\n  return amount * rate;\r\n}\r\n","import convert from './convert';\r\nimport { formatCurrency } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\n\r\nconst amountInput = document.querySelector('#amount-input');\r\nconst amountOutput = document.querySelector('#amount-output');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst ratesList = document.querySelector('#rates-list');\r\nexport const rateSelect = document.querySelector('#currency');\r\n\r\nexport const displayConversion = async () => {\r\n  const value = await convert(\r\n    amountInput.value,\r\n    fromSelect.value,\r\n    toSelect.value\r\n  );\r\n  const formatted = formatCurrency(value, toSelect.value);\r\n  console.log(formatted);\r\n  amountOutput.textContent = `${formatted}`;\r\n};\r\n\r\nexport const displayRates = async () => {\r\n  const currency = rateSelect.value;\r\n  const rates = await calculate(currency);\r\n\r\n  console.log(rates);\r\n\r\n  const { today, yesterday, ratio } = rates[currency];\r\n  //   const { yesterday } = rates[currency];\r\n  //   const { ratio } = rates[currency];\r\n  //   console.log(today);\r\n  //   console.log(yesterday);\r\n  console.log(ratio);\r\n\r\n  const todayFormatted = Object.keys(today.rates).map(curr =>\r\n    formatCurrency(today.rates[curr] * 100, curr)\r\n  );\r\n  const yesterdayFormatted = Object.keys(yesterday.rates).map(curr =>\r\n    formatCurrency(yesterday.rates[curr] * 100, curr)\r\n  );\r\n  const ratioFormatted = Object.keys(ratio).map(rate =>\r\n    convertPercent(ratio[rate])\r\n  );\r\n\r\n  const classes = Object.keys(ratio).map(rate =>\r\n    ratio[rate] >= 0 ? 'plus' : 'minus'\r\n  );\r\n\r\n  console.log(classes);\r\n\r\n  console.log(todayFormatted);\r\n  console.log(yesterdayFormatted);\r\n  console.log(ratioFormatted);\r\n\r\n  //   console.log(today);\r\n\r\n  const html = todayFormatted\r\n    .map(\r\n      (el, idx) => `\r\n    <li class=\"list-item\">\r\n      <p class=\"today\">${today.date}: 100 ${today.base} = ${el}</p>\r\n       <p class=\"diff ${classes[idx]}\">${ratioFormatted[idx]}</p>\r\n      <p class=\"yesterday\">${yesterday.date}: 100 ${yesterday.base} = ${\r\n        yesterdayFormatted[idx]\r\n      }</p>\r\n  </li>\r\n    `\r\n    )\r\n    .join('');\r\n\r\n  ratesList.innerHTML = html;\r\n};\r\n","import { generateOptions } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\nimport { displayConversion, rateSelect, displayRates } from './displayData';\r\n\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst ratesSelect = document.querySelector('#currency');\r\n\r\nconst form = document.querySelector('.converter');\r\n\r\n// getRatesByBase('PLN');\r\n// getRatesToCalculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('USD', 1);\r\n// const percent = convertPercent(0.007576);\r\n// console.log(percent);\r\nconst html = generateOptions();\r\nfromSelect.innerHTML = html;\r\ntoSelect.innerHTML = html;\r\nratesSelect.innerHTML = html;\r\n\r\nform.addEventListener('input', displayConversion);\r\nrateSelect.addEventListener('change', displayRates);\r\n"]}