{"version":3,"sources":["js/currencies.js","js/api.js","js/calculateRates.js","js/helpers.js","js/convert.js","js/displayData.js","js/index.js"],"names":["currencies","USD","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","ZAR","EUR","generateOptions","Object","entries","map","currencyCode","currencyName","join","formatCurrency","amount","currency","Intl","NumberFormat","style","format","endpoint","getRatesByBase","base","res","fetch","rates","json","err","alert","message","getRatesToCalculate","date","ratesToCalculate","calculate","from","latestData","Date","dayBeforeDate","setDate","getDate","dateFormatted","Array","toISOString","splice","dayBeforeData","today","yesterday","rateRatio","keys","forEach","ratio","convertPercent","decimal","minimumFractionDigits","ratesByBase","convert","to","rate","amountInput","document","querySelector","amountOutput","toSelect","fromSelect","ratesList","rateSelect","displayConversion","value","formatted","textContent","displayRates","todayFormatted","curr","yesterdayFormatted","ratioFormatted","classes","html","el","idx","innerHTML","ratesSelect","form","addEventListener"],"mappings":";;AMAA;;AACA;;ANDA,AMEA,MNFMA,UAAU,GAAG;ACAnB,ACAA,AEAA,AJCEC,AKDF,AFAO,EHCLA,GAAG,CCDC+C,CDCC,EGDS+B,KFAF,GAAG,MEAV,CAAwBC,KHAZ,EGAZ,EAAiC,iBFAxC;ADEE9E,AGDA,AGEF,ENDEA,GAAG,EAAE,EGDE0C,IAAI,CAACC,YHDK,AGCV,CAAkB,OAAlB,EAA2B;AFC7B,ACAP,AEAA,AJCE1C,AKFF,AFCI2C,EHCF3C,EGDE2C,CHCC,CEDCc,AEAAsB,CJCC,EGDE,EAAE,IFAWjC,EGAL,GAAG,ADDgB,EDCd,AEAtB,AJFmB,GEEM,EAAzB,EDAO,CAA8BC,IAA9B,EAAoC;AACzC,ADCA9C,AGDE6E,EHCF7E,EGDE6E,CHCC,CCDC,CDCC,gBAJY,EGGM,EAAE;AFCvB,ACAW,AEAA,AJCb5E,AKHF,AFDoC,EHIlCA,CGJO,EHIJ,AGDA0C,EHCE,GCDGI,CEHD,CAGG6B,CFAC,ECAiBnB,AEAAsB,CHAd,GEHP,CAAP,EFGoB/B,AGAP,CAAuBV,CFAvB,AFJI,CEIqBoB,EDAb,CAAE,CCAd,AEAA,EHAgBd,ACAe,AEAAc,IAA/B,EAAqCsB,EHAZ,AGAzB,EAAyC,cHADlC,IAAK,EAAjC,CAAvB;AACA,ACAF,AEAA,AJCA5C,AGDD,AGAD,ENCEA,GAAG,CEDC,AEAA,AEAAqF,CJAC/B,AEAAsB,AJCA,GCDG7B,KAAK,CKAC,ELAE,AGAA,CAACS,AEAAyB,CNLA,GEKI,AEAL,CHAMpC,ACAAW,AEAtB,EAAwB,CHAC,AKAA,CLACR,ACAL,AIAKkC,CJA1B,EAA6B,CDAP,EAApB,OKAe,CAAuB,gBAAvB,CAAnB;ALCI,ACAA5B,AEAA,AJCFrD,AKJF,ACGA,ENCEA,EEDEqD,CFCC,CMDC8B,CNCC,GIDGrC,CHACA,GKAG,CFAC,CHAX,CKAakC,CFAC,EFAE,CAACzB,AFNF,GIMK,CFAJ,AIAK,CJArB,AIAsB0B,GJAG,EAAzB,QIAa,CAAuB,SFAD1B,IAAf,CAApB,AEAa,CAAjB;ALCG,ACCC,AEDAoB,AJCF1E,AMDF,ENCEA,CCLA,CAIE,AGAA0E,CJCC,CMDC0B,CNCC,GEAG7C,CDDCR,GAAP,CGAW,CHAC,AGAAO,CEAC,GJCG,AEDL,AEAKyB,CFAhB,EFCmB,CEDClC,IEAI,CJCC,AEDzB,AEAyBmC,CNPV,YMOC,CAAuB,WAAvB,CAApB,IJCiD1B,IAApB,CAAzB;ADAAN,ACEA,AEFD,AJCD/C,AMAF,ENAEA,ECDE+C,CDCC,CMACqD,CNAC,ECDE,CAACtD,ACEAI,AIDA,GLDG,AKCA4B,CLDC9B,ACEA,GAAG,IDFR,ACEYO,AFVF,AMSE,CLDjB,AKCkBwB,GJCL,CAASzB,SIDb,CJCuB,AIDA,CJCCJ,IAApB,CAAb,MIDS,CAAb,EAEA;ALFG,ACEC,AFDFjD,AMEF,ENFEA,GAAG,EAAE,GECGuD,aAAa,GAAG,IAAID,CFXX,GEWO,CAASL,IAAI,CAACO,OAAL,CAAaP,IAAI,CAACQ,OAAL,KAAiB,CAA9B,CAAT,CAAtB;ADDH,ACEG,AEFF,AJCAxD,AKNF,ACQA,ENFEA,GAAG,CKNC2E,CLMC,CIDCD,EFEEjB,EEFE,GAAGc,ECLE,GAAGK,GHOG,EFZJ,CEYOlB,AEFA,CAACP,CCLC,CAAC0B,EHOE,AEFL,CFEM1B,AEFjB,CAAkBT,GFEP,CAAWY,CEFtB,CAAwBmB,EAAxB,CAAb,ACLkB,CAAuB,OHOO,CAACd,OGP/B,CAApB,GHOqC,EAAX,EACnBC,MADmB,CACZ,CADY,EACT,EADS,EAEnB/B,IAFmB,CAEd,EAFc,CAAtB;AAGA,AEJF,AJCA5B,AKNF,ACQA,ENFEA,GAAG,CKNC6E,CLMC,EIDE/C,CFIC8B,KEJK,GAAGa,ACLA,GAAGE,CDKnB,AJXiB,CEeI,GAAG,GGTG,CAACC,EHSE,WGTX,CAAuB,gBAAvB,CAArB,CHSoD1B,IAApB,EAA0BM,aAA1B,CAA5B;ADHG,ACKHR,AELH,AJCC/C,AKNF,ACQA,ENFEA,EEIE+C,CFJC,CKNC8B,CLMC,OKNO,CJKQhC,EILL6B,GHUG,CAACzB,IAAD,AFjBD,AKOM,CHUrB,AGVsB0B,CHUCf,KAAvB,EDLG,CAAmCvB,ACKPa,IDL5B,AILU,CAAuB,CJKQJ,IAAzC,ACKH,EDLkD,OILrC,CAAjB;AJME,ACKEC,AFJF9C,AKNF,ACQA,ENFEA,EEIE8C,CFJC,CCDC,AILA+B,CJKChC,ADCA,ICDL,EAAW,GILG,GAAG4B,CHUC,CAACzB,IAAD,CAAhB,AFlBe,CEkBQY,AGVA,CAACc,QHUxB,GAAmChB,EGVpB,CAAuB,UHUtC,MGVe,CAAnB;AJMI,ACMA,AFLFzD,AKNF,ACQA,ENFEA,GAAG,CKNC6E,CLMC,CCDC,ECMEjB,KGXK,GAAGY,CHWC,GAAG,EAAlB,EGXsB,CLTP,AKSQC,aAAT,CAAuB,aAAvB,CAAlB;AJMM,ACMFrD,AFLFnB,AKLK,ELKLA,EEKEmB,CFLC,CKLQ0D,CLKN,GEKG,CAACjB,CDNCzB,GAAG,ACMX,CAAYY,AGVO,EJIL,CIJQwB,ELXP,GCeKnC,ECME,CAACC,AGVO,CAACmC,CJIN,CACpB,ECKL,CDLOxC,CCKuB6B,ODLd,ACKhB,AGVsB,CHWpBlC,AGX2C,QHWnC,GGXY,CHYjBgC,AGZF,GJK4BzB,IAAK,ECOtB,CAACP,QAAD,CAAT,GACC,CAACoB,UDTkB,ACSR,CDTf,ACSgBV,KAAX,CAAiBV,QAAjB,IAA6B6B,aAAa,CAACnB,KAAd,CAAoBV,QAApB,CAA9B,IACA6B,aAAa,CAACnB,KAAd,CAAoBV,QAApB,CAJN;ADHE,ACUFiB,AFXF3C,AMCF,ENDEA,EEWE2C,CFXC,CMCC4C,CNDC,GMCG,ELAEnD,CKAC,ILAI,GAAG,ACUA,CAACS,GF5BF,CE4BC,CDVMX,ACUtB,CAAuB2B,EDVE,CAACxB,ECU1B,EDVsB,CCUSqB,CDV7B,QCUF,GIVJ;ALCM,ACUH,AFXDzD,AMCFyE,ENDEzE,GAAG,EAAE,GMCG,CAACyF,ELAEtD,KAAP,EKAN,CNnBmB,EMmBImD,IAAvB;ALCK,ADDHrF,AKNK,ACOPuE,ENDEvE,GCLE,ADKC,CCCC,AIPO2E,CLMN,CMCC,CAACa,ILAIpD,GAAP,EAAY,AKAlB,GAAqBiD,EDPS,ELbX,AMoBnB,CDPiC,YAAY;AJQvChD,ACSJ,AFVApC,AKNA,ACOFwF,ENDExF,GAAG,CCCCoC,CDDC,CKNCuC,CHgBCnC,EDTE,AKAA,CLACL,AKAAoD,CDPC,EJOE,CAAClD,AIPA,KLdG,AMqBnB,CDPsB,CJOX,CAAL,AKAkB+C,CJStB,GITF,gBDNIlB,WAAW,CAACS,KADM,EAElBJ,UAAU,CAACI,KAFO,EAGlBL,QAAQ,CAACK,KAHS,CAApB;AJQG,ACSJ,AFVC1E,AKFA,ACIFwF,ENFExF,EMEE,CNFC,AMEAyF,ENFE,CKFCd,SAAS,GAAG,CCIpB,CAAsB,INvBH,GMuBnB,EAA+BF,qBDJIC,KAAf,EAAsBL,ECI1C,MDJkD,CAACK,KAA/B,CAAlB;AJIC,ADDDzE,AKFAmE,ELEAnE,AKFAmE,CJPA,EDSG,EAAE,ECCE,KIHK,CAACQ,SLpBI,EKoBjB,GAA4B,GAAED,SAAU,EAAxC;AJIE,ADDFzE,AKFD,ACGDsE,CDXO,CLULtE,GAAG,EAAE,CCCC,gBKAGuF,GNxBQ,aMwBnB,CAA4B,QAA5B,EAAsCZ,yBAAtC;ALCM,ADDJ1E,EAAAA,GAAG,EAAE,KCCK2B,GAAG,GAAG,MAAMC,ADzBL,KCyBU,CACpB,GAAEJ,QAAS,IAAGW,IAAK,SAAQT,IAAK,0BADZ,CAAvB;AAGA,ADHJzB,EAAAA,GAAG,EAAE,KCGK4B,KAAK,GAAG,CD5BD,KC4BOF,GAAG,CAACG,IAAJ,EAApB;AACA,ADHJ5B,EAAAA,GAAG,EAAE,MCGM2B,KAAP,GD7Ba;AC8Bd,ADHH1B,AKJK,ELILA,GCHE,ADGC,CCGC,AIPOuE,CLIN,MCGM3C,GAAP,EAAY,AIPO,GAAG,CLvBT,WKuBqB;AJQlCC,ADHJ5B,AKJA,ELIAA,GAAG,CCGC4B,CDHC,CKJCb,GJOG,CAACY,GAAG,CAACE,AIPA,GAAGoC,GLxBA,CC+BR,CAAL,KIPuB,CAACE,KAA5B;AJQG,ADHHlE,AKJA,ELIAA,GAAG,EAAE,CKJCwB,KAAK,GAAG,MAAM,GLzBH,0BKyBaV,QAAV,CAApB;AJQC,ADHDb,AKHA,ELGAA,GAAG,EAAE,CKHC,UL3BW;ACkClB,ADHCC,AKJQ0C,ELIR1C,EKJQ0C,CLIL,EAAE,EKJC,YL3BW;AAgCjBzC,AKLe0C,ELKf1C,EKLe0C,CLKZ,EAAE,MKLC,cL3BW;AAiCjBzC,AKN0B6C,ELM1B7C,EKN0B6C,CLMvB,EAAE;AAjCY,AK2BX,CL3BR,KK2BsCzB,KAAK,CAACV,QAAD,CAAzC;AAEA,QAAMwD,cAAc,GAAGhE,MAAM,CAACyC,IAAP,CAAYH,KAAK,CAACpB,KAAlB,EAAyBhB,GAAzB,CAA6B+D,IAAI,IACtD,gCAAe3B,KAAK,CAACpB,KAAN,CAAY+C,IAAZ,IAAoB,GAAnC,EAAwCA,IAAxC,CADqB,CAAvB;ALOK,AKJL,MLIWlE,EKJLmE,aLIoB,GAAG,EKJL,GAAGlE,CLK3BA,KKLiC,CLK3B,AKL4ByC,CLK3BxC,GKLoB,CAAYsC,GLKvC,CAAe1E,KKLiC,CAACqD,ILKjD,CKL2B,CLMxBhB,CKNqDA,ELKxD,CAEI,AKPuB,CLOtB,AKPuD+D,CLOtD9D,GKP0D,IAC9D,KLMG,EAAeC,YAAf,CAAD,KACG,OKPUmC,SAAS,CAACrB,CLOHf,IKPP,CAAgB8D,IAAhB,GLOoB,CKPI,GAAvC,CLOuC9D,CKPK8D,IAA5C,CADyB,CAA3B,KLQsD,MAAK7D,YAAa,WAHxE,EAKGC,IALH,CAKQ,EALR,CADK;AKDL,QAAM8D,cAAc,GAAGnE,MAAM,CAACyC,IAAP,CAAYE,KAAZ,EAAmBzC,GAAnB,CAAuBgD,IAAI,IAChD,6BAAeP,KAAK,CAACO,IAAD,CAApB,CADqB,CAAvB;AAGA,QAAMkB,OAAO,GAAGpE,MAAM,CAACyC,IAAP,CAAYE,KAAZ,EAAmBzC,GAAnB,CAAuBgD,IAAI,IACzCP,KAAK,CAACO,IAAD,CAAL,IAAe,CAAf,GAAmB,MAAnB,GAA4B,OADd,CAAhB;AAIA,QAAMmB,IAAI,GAAGL,cAAc,CACxB9D,GADU,CAET,CAACoE,EAAD,EAAKC,GAAL,KAAc;ALAb,MAAMjE,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAC5BC,IAAI,CAACC,YAAL,CAAkB,OAAlB,EAA2B;AACzBC,EAAAA,KAAK,EAAE,UADkB,MKCJ2B,KAAK,CAACd,IAAK,SAAQc,KAAK,CAACvB,IAAK,MAAKuD,EAAG;ALC3D9D,EAAAA,sBKAoB4D,OAAO,CAACG,GAAD,CAAM,KAAIJ,cAAc,CAACI,GAAD,CAAM;ALFhC,CAA3B,EAGG3D,MAHH,CAGUL,MAHV,CADK,YKIsBgC,SAAS,CAACf,IAAK,SAAQe,SAAS,CAACxB,IAAK,MAC3DmD,kBAAkB,CAACK,GAAD,CACnB;;KARQ,EAYVlE,IAZU,CAYL,EAZK,CAAb;AAcAoD,EAAAA,SAAS,CAACe,SAAV,GAAsBH,IAAtB;AACD,CAlCM","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["const currencies = {\r\n  USD: 'United States Dollar',\r\n  AUD: 'Australian Dollar',\r\n  BGN: 'Bulgarian Lev',\r\n  BRL: 'Brazilian Real',\r\n  CAD: 'Canadian Dollar',\r\n  CHF: 'Swiss Franc',\r\n  CNY: 'Chinese Yuan',\r\n  CZK: 'Czech Republic Koruna',\r\n  DKK: 'Danish Krone',\r\n  GBP: 'British Pound Sterling',\r\n  HKD: 'Hong Kong Dollar',\r\n  HRK: 'Croatian Kuna',\r\n  HUF: 'Hungarian Forint',\r\n  IDR: 'Indonesian Rupiah',\r\n  ILS: 'Israeli New Sheqel',\r\n  INR: 'Indian Rupee',\r\n  ISK: 'Icelandic Krona',\r\n  JPY: 'Japanese Yen',\r\n  KRW: 'South Korean Won',\r\n  MXN: 'Mexican Peso',\r\n  MYR: 'Malaysian Ringgit',\r\n  NOK: 'Norwegian Krone',\r\n  NZD: 'New Zealand Dollar',\r\n  PHP: 'Philippine Peso',\r\n  PLN: 'Polish Zloty',\r\n  RON: 'Romanian Leu',\r\n  RUB: 'Russian Ruble',\r\n  SEK: 'Swedish Krona',\r\n  SGD: 'Singapore Dollar',\r\n  THB: 'Thai Baht',\r\n  TRY: 'Turkish Lira',\r\n  ZAR: 'South African Rand',\r\n  EUR: 'Euro',\r\n};\r\n\r\nexport const generateOptions = () =>\r\n  Object.entries(currencies)\r\n    .map(\r\n      ([currencyCode, currencyName]) =>\r\n        `<option value=\"${currencyCode}\">${currencyCode} - ${currencyName}</option>`\r\n    )\r\n    .join('');\r\n\r\nexport const formatCurrency = (amount, currency) =>\r\n  Intl.NumberFormat('en-EN', {\r\n    style: 'currency',\r\n    currency,\r\n  }).format(amount);\r\n","const endpoint = 'https://api.exchangeratesapi.io';\r\n\r\nexport async function getRatesByBase(base) {\r\n  try {\r\n    const res = await fetch(`${endpoint}/latest?base=${base}`);\r\n    const rates = await res.json();\r\n    return rates;\r\n  } catch (err) {\r\n    alert(err.message);\r\n  }\r\n}\r\n\r\nexport async function getRatesToCalculate(base, date) {\r\n  if (!date) {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/latest?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  } else {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/${date}?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  }\r\n}\r\n","import { getRatesToCalculate } from './api';\r\n\r\nconst ratesToCalculate = {};\r\n\r\nexport default async function calculate(from) {\r\n  if (!ratesToCalculate[from]) {\r\n    ratesToCalculate[from] = {};\r\n\r\n    const latestData = await getRatesToCalculate(from);\r\n\r\n    const date = new Date(latestData.date);\r\n    const dayBeforeDate = new Date(date.setDate(date.getDate() - 1));\r\n    const dateFormatted = Array.from(dayBeforeDate.toISOString())\r\n      .splice(0, 10)\r\n      .join('');\r\n    const dayBeforeData = await getRatesToCalculate(from, dateFormatted);\r\n\r\n    ratesToCalculate[from].today = latestData;\r\n    ratesToCalculate[from].yesterday = dayBeforeData;\r\n\r\n    const rateRatio = {};\r\n    Object.keys(latestData.rates).forEach(\r\n      currency =>\r\n        (rateRatio[currency] =\r\n          (latestData.rates[currency] - dayBeforeData.rates[currency]) /\r\n          dayBeforeData.rates[currency])\r\n    );\r\n\r\n    ratesToCalculate[from].ratio = rateRatio;\r\n  }\r\n  return ratesToCalculate;\r\n}\r\n","export function convertPercent(decimal) {\r\n  return Intl.NumberFormat('en-EN', {\r\n    style: 'percent',\r\n    minimumFractionDigits: 2,\r\n  }).format(decimal);\r\n}\r\n","import { getRatesByBase } from './api';\r\n\r\nconst ratesByBase = {};\r\n\r\nexport default async function convert(amount, from, to) {\r\n  if (!ratesByBase[from]) {\r\n    const rates = await getRatesByBase(from);\r\n    ratesByBase[from] = rates;\r\n  }\r\n\r\n  const rate = ratesByBase[from].rates[to];\r\n  return amount * rate;\r\n}\r\n","import convert from './convert';\r\nimport { formatCurrency } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\n\r\nconst amountInput = document.querySelector('#amount-input');\r\nconst amountOutput = document.querySelector('#amount-output');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst ratesList = document.querySelector('#rates-list');\r\n\r\nexport const rateSelect = document.querySelector('#currency');\r\n\r\nexport const displayConversion = async () => {\r\n  const value = await convert(\r\n    amountInput.value,\r\n    fromSelect.value,\r\n    toSelect.value\r\n  );\r\n  const formatted = formatCurrency(value, toSelect.value);\r\n  amountOutput.textContent = `${formatted}`;\r\n};\r\n\r\nexport const displayRates = async () => {\r\n  const currency = rateSelect.value;\r\n  const rates = await calculate(currency);\r\n\r\n  const { today, yesterday, ratio } = rates[currency];\r\n\r\n  const todayFormatted = Object.keys(today.rates).map(curr =>\r\n    formatCurrency(today.rates[curr] * 100, curr)\r\n  );\r\n  const yesterdayFormatted = Object.keys(yesterday.rates).map(curr =>\r\n    formatCurrency(yesterday.rates[curr] * 100, curr)\r\n  );\r\n  const ratioFormatted = Object.keys(ratio).map(rate =>\r\n    convertPercent(ratio[rate])\r\n  );\r\n  const classes = Object.keys(ratio).map(rate =>\r\n    ratio[rate] >= 0 ? 'plus' : 'minus'\r\n  );\r\n\r\n  const html = todayFormatted\r\n    .map(\r\n      (el, idx) => `\r\n    <li class=\"list-item\">\r\n      <p class=\"today\">${today.date}: 100 ${today.base} = ${el}</p>\r\n       <p class=\"diff ${classes[idx]}\">${ratioFormatted[idx]}</p>\r\n      <p class=\"yesterday\">${yesterday.date}: 100 ${yesterday.base} = ${\r\n        yesterdayFormatted[idx]\r\n      }</p>\r\n  </li>\r\n    `\r\n    )\r\n    .join('');\r\n\r\n  ratesList.innerHTML = html;\r\n};\r\n","import { generateOptions } from './currencies';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\nimport { displayConversion, rateSelect, displayRates } from './displayData';\r\n\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst ratesSelect = document.querySelector('#currency');\r\n\r\nconst form = document.querySelector('.converter');\r\n\r\n// getRatesByBase('PLN');\r\n// getRatesToCalculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('PLN', 1);\r\n// calculate('USD', 1);\r\n// const percent = convertPercent(0.007576);\r\n// console.log(percent);\r\nconst html = generateOptions();\r\nfromSelect.innerHTML = html;\r\ntoSelect.innerHTML = html;\r\nratesSelect.innerHTML = html;\r\n\r\nform.addEventListener('input', displayConversion);\r\nrateSelect.addEventListener('change', displayRates);\r\n"]}