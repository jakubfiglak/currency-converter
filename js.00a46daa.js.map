{"version":3,"sources":["js/currencies.js","js/api.js","js/convert.js","js/calculateRates.js","js/helpers.js","js/index.js"],"names":["currencies","USD","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","ZAR","EUR","generateOptions","Object","entries","map","currencyCode","currencyName","join","formatCurrency","amount","currency","Intl","NumberFormat","style","format","endpoint","getRatesByBase","base","res","fetch","rates","json","err","alert","message","getRatesToCalculate","daysFromNow","today","Date","dayInThePast","setDate","getDate","queryString","Array","from","toISOString","splice","ratesByBase","convert","to","console","log","rate","converted","calculate","todayData","yesterdayData","rateRatio","keys","forEach","convertPercent","decimal","minimumFractionDigits","fromSelect","document","querySelector","toSelect","ratesSelect","amountInput","amountOutput","form","percent","html","innerHTML","displayData","value","formatted","textContent","addEventListener"],"mappings":";;AKAA;;AACA;;ALDA,AKEA,MLFMA,UAAU,GAAG;ACAnB,AEAA,ADAA,AFCEC,AIDK,EJCLA,GAAG,CCDC+C,CDCC,EIDSmC,KHAF,GAAG,MGAV,CAAwBC,KJAZ,EIAZ,EAAiC,iBHAxC;ADEElF,AIDA,ACEF,ELDEA,GAAG,EAAE,EIDE0C,IAAI,CAACC,YJDK,AICV,CAAkB,OAAlB,EAA2B;AHC7B,AEAQ,ADAf,AFCE1C,AIDE2C,EJCF3C,EIDE2C,CJCC,CEDCwB,CFCC,EIDE,EAAE,IHAWrB,AEAQ4B,EDAb,GAAG,AEDgB,EFCpC,AFFmB,EGEJ,CAAyBV,IFAjC,AEAQ,CFAsBjB,CEAS,GFAvC,EAAoC;AACzC,AEAA,AHCA9C,AIDEiF,ACCJ,ELAEjF,EIDEiF,CJCC,CCDC,CDCC,CGDCP,SAAS,GAAG,GHHD,EIGM,CDAC,CCAC,6BDAmBX,IAApB,CAAxB;AFCE,AEAF,ADAa,AFCb9D,AIJkC,EJIlCA,CIJO,EJIJ,AIDA0C,EJCE,CGDCgC,EFAE5B,CGHD,CAGGiC,CHAC,ECAiBb,CDAd,GGHP,CAAP,CDGmB,CFACnB,ACAP,CAAuBV,CCAd,AHJL,GCIQ,CAAE,CCAd,CCAe,CFACM,ACAemB,IAA/B,EAAqCK,EDAZ,ACAzB,EAAyC,cDADtB,IAAK,CEAViB,CFAvB,CAAvB,EEA0B,EAA0B,CAA1B,CAA5B;AFCE,AECF,ADDA,AFCA7D,AIDD,EJCCA,GAAG,CEDC,CAACgE,AFCA,CGACU,EFDE3B,KAAK,EECE,CFDC,ACAA,CAACc,CCCC,AHND,EGMjB,CDDgB,CDAMhB,ACAtB,EAAwB,CDAC,CAACG,IAAJ,EAApB;AACA,AECFnB,ADDEsC,AFCFlE,EGAA4B,AHAA5B,EEDEkE,CFCC,EAAE,CGAC,CAACQ,EFDE5B,ACAA,CAACqB,CCCV,CAAYI,CDDV,CDAA,ACAa,KFNE,EGOI,CAACzB,KAAtB,EAA6B6B,OAA7B,CACEvC,QAAQ,IACLqC,SAAS,CAACrC,QAAD,CAAT,GACC,CAACmC,EDJL,OCIc,CAACzB,KAAV,CAAgBV,QAAhB,IAA4BoC,aAAa,CAAC1B,KAAd,CAAoBV,QAApB,CAA7B,IACAoC,aAAa,CAAC1B,KAAd,CAAoBV,QAApB,CAJN;AFAC,AEOD8B,ADPE,AFCFjE,AKFF,EFQEiE,AHNAjE,CCLA,CAIE,CDCC,CKFC8E,CLEC,EGME,CAACZ,ADPArB,CDACE,EEOT,CFPE,AEOUyB,CDPC,CDAC,AIDA,EHCE,CGDCO,IFQjB,CDPsB,GGDG,CAACC,ELNT,WKMA,CAAuB,OHCHrB,IAAf,CAApB,IGDe,CAAnB;AJEIX,AEOF,ADPEc,AFCF7D,AKFF,ELEEA,ECDE+C,ACAAc,CFCC,CKFCmB,CLEC,ECDE,AEOAT,CFPCzB,GAAG,CAACE,AIDA,CHCC,CAACU,CGDCoB,CFQf,EDPa,CDAN,ACAL,AFRe,CCQf,ECAoBlC,CGDC,CAACmC,GHCtB,UGDa,CAAuB,cAAvB,CAAjB;AJEG,AEOF,ADPGf,AFCF/D,AKFF,ELEEA,EEDE+D,CFCC,CKFCiB,CLEC,IEDI,CAAChB,GAAR,CAAYJ,CGDC,GAAGiB,OHChB,CGDwB,CAACC,ELRV,WKQC,CAAuB,WAAvB,CAApB;AJEC,ACAE,AFCD7E,AKFF,ELEEA,GAAG,CKFCgF,CLEC,UKFU,GAAGJ,KLTD,GKSS,CAACC,aAAT,CAAuB,eAAvB,CAApB;ALGE5E,AKFF,ELEEA,GAAG,CKFCgF,CLEC,WKFW,GAAGL,CLVF,OKUU,CAACC,aAAT,CAAuB,gBAAvB,CAArB;AJEO,ACAL,AFCA3E,AKFF,ELEEA,GAAG,CKFCgF,CLEC,CEDClB,EGDE,EHCE,CGDCY,EJCS7B,ACAPY,MGDM,CAACkB,GLXH,CEYO,CAACrB,IAAD,CAAX,CAAkBd,CDA1B,CAAmCH,AID7B,CAAuB,EHCrB,CDAR,ACAgCsB,EDASb,ACAjC,CAAb,MGDW,CAAb,EAEA,CJDO,EAAsD;AAC3D,ACAA,AFCA7C,AKAF,ELAEA,GAAG,CCDC,CAAC6C,ADCA,CEDCiB,SAAS,CDAf,EAAkB,ACAAlC,MAAM,AFbP,GEaUiC,IAA3B;ADCE,ACAFF,AFCA1D,EEDA0D,AFCA1D,GAAG,EAAE,CCDC,CCAC,CAAC2D,GAAR,CAAa,GAAEhC,MAAO,IFdL,GEcWyB,IAAK,OAAMS,SAAU,OAAMJ,EAAG,EAA1D;ADCI,ACAJ,AFCAxD,AKDF,ELCEA,GAAG,EAAE,EEDE0B,GDAGS,GAAG,ACAA,GDAG,ACAAwB,GFfC,CEejB,EDAsBvB,KAAK,AIAnB,CJCD,GAAEJ,CIDX,OJCoB,gBAAeE,IAAK,0BADX,CAAvB;AAGA,ACFL,AFCCjC,AKDF,ELCEA,GAAG,CKDC6E,CLCC,KCCKzC,CIFC,GAAG,CJEC,GAAG,IDlBD,ECkBOF,GAAG,CAACG,IAAJ,EAApB,CAJE,CAKF,OIHyB,QAAf,CAAhB;ALEEpC,AKDFuD,ELCEvD,GAAG,EAAE,AKDA,CAACwD,GAAR,CAAYoB,OAAZ,ELjBmB;ACoBb,ADDJ3E,AKDF,ELCEA,GAAG,CKDC4E,CLCC,GKDG,GJEG1C,AIFA,KJEP,ODpBa,sBKkBnB;AJGK,ADDHjC,AKDFkE,ELCElE,GCNE,ADMC,CCCC,CDDC,GKDG,CAAC4E,EJEEzC,GAAP,EAAY,EIFlB,CLnBmB,EKmBIwC,IAAvB;AJGMvC,ADDJnC,AKDFoE,ELCEpE,GAAG,CCCCmC,CDDC,CKDC,CAACwC,EJEE,CAACzC,GAAG,CAACE,EIFhB,GAAqBsC,EJEV,CAAL,CIFN,CLpBmB;ACuBd,ADDHzE,AKDFoE,ELCEpE,GAAG,EAAE,IKDI,CAAC0E,SAAZ,GLrBmB,AKqBKD,IAAxB;AJGG,ADDDxE,EAAAA,CCVA,EDUG,EAAE,ECCE,IAAIoC,WAAW,GAAG,ADxBR,CCwBV,EAAqB;AAC1B,ADDFnC,AKDF,ELCEA,GAAG,CKDCyE,CLCC,GCCGrC,KAAK,EIFE,CJEC,EIFE,EJEEC,EDzBH,ECyBD,EAAd,IIF4B;AJG5B,ADDFpC,AKDA,ELCAA,GAAG,EAAE,CKDCyE,EJEEpC,GIFG,GAAG,KLxBG,CC0BG,AIFA,GJEG,IAAID,IAAJ,CAASD,KAAK,CAACG,IIDpC4B,GJC8B,CAAc/B,KAAK,CAACI,CIDvC,CAACkC,KJCgC,AIF1B,EAElBZ,GJA8D3B,OIApD,CAACuC,GJAmB,CAAT,CAArB,AIFkB,EAGlBT,QAAQ,CAACS,KAHS,CAApB;AJGE,ADDFxE,AKGA,ELHAA,GAAG,EAAE,CKGCyE,EJFElC,OIEO,GAAG,CJFC,AD3BF,GC2BKC,KAAK,CAACC,IAAN,CAAWL,YAAY,CAACM,IIEb8B,KAAf,EJFe,AIEOT,EJFlB,EACjBpB,IIC2C,CAAC6B,CJF3B,CACV,CADU,EACP,AICG,CAAlB,CJFsB,EAEjB1D,IAFiB,CAEZ,EAFY,CAApB;ADAFb,AKGA8C,ELHA9C,AKGA8C,GLHG,EAAE,EKGE,CAACC,GAAR,CAAYyB,QL9BK,CK8BjB;AJCE,ADHFvE,AKGAgE,ELHAhE,AKGAgE,GLHG,EAAE,CCGC,MIAM,CAACQ,OL/BI,IK+BjB,GAA4B,GAAED,SAAU,EAAxC;AJCI,ADHJtE,AKGD,CATD,CLMEA,GAAG,EAAE,KCGKsB,GAAG,GAAG,MAAMC,CDhCL,ICgCU,CACpB,GAAEJ,QAAS,IAAGiB,WAAY,SAAQf,IAAK,0BADnB,CAAvB;AAGA,ADLJpB,EAAAA,GAAG,EAAE,KCKKuB,KAAK,CDnCE,ECmCC,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAJE,CAKF;ADLJvB,AKGF8D,ELHE9D,EKGE,CLHC,AKGAsE,ELHE,cA/BY,AKkCnB,CAAsB,OAAtB,EAA+BJ,WAA/B;AJGM,ADLJjE,EAAAA,GAAG,EAAE,MCKMqB,KAAP,SDrCa;ACsCd,ADLHpB,EAAAA,GCFE,ADEC,CCKC,CDLC,MCKMsB,GAAP,EAAY;AACZC,ADvCa,CAAnB,KCuCMA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD;AACF,ADLI,MAAMvB,eAAe,GAAG,MAC7BC,MAAM,CAACC,OAAP,CAAepC,UAAf,EACGqC,GADH,CAEI,CAAC,CAACC,YAAD,EAAeC,YAAf,CAAD,KACG,kBAAiBD,YAAa,KAAIA,YAAa,MAAKC,YAAa,WAHxE,EAKGC,IALH,CAKQ,EALR,CADK;ACMN;;;ADEM,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAC5BC,IAAI,CAACC,YAAL,CAAkB,OAAlB,EAA2B;AACzBC,EAAAA,KAAK,EAAE,UADkB;AAEzBH,EAAAA;AAFyB,CAA3B,EAGGI,MAHH,CAGUL,MAHV,CADK","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["const currencies = {\r\n  USD: 'United States Dollar',\r\n  AUD: 'Australian Dollar',\r\n  BGN: 'Bulgarian Lev',\r\n  BRL: 'Brazilian Real',\r\n  CAD: 'Canadian Dollar',\r\n  CHF: 'Swiss Franc',\r\n  CNY: 'Chinese Yuan',\r\n  CZK: 'Czech Republic Koruna',\r\n  DKK: 'Danish Krone',\r\n  GBP: 'British Pound Sterling',\r\n  HKD: 'Hong Kong Dollar',\r\n  HRK: 'Croatian Kuna',\r\n  HUF: 'Hungarian Forint',\r\n  IDR: 'Indonesian Rupiah',\r\n  ILS: 'Israeli New Sheqel',\r\n  INR: 'Indian Rupee',\r\n  ISK: 'Icelandic Krona',\r\n  JPY: 'Japanese Yen',\r\n  KRW: 'South Korean Won',\r\n  MXN: 'Mexican Peso',\r\n  MYR: 'Malaysian Ringgit',\r\n  NOK: 'Norwegian Krone',\r\n  NZD: 'New Zealand Dollar',\r\n  PHP: 'Philippine Peso',\r\n  PLN: 'Polish Zloty',\r\n  RON: 'Romanian Leu',\r\n  RUB: 'Russian Ruble',\r\n  SEK: 'Swedish Krona',\r\n  SGD: 'Singapore Dollar',\r\n  THB: 'Thai Baht',\r\n  TRY: 'Turkish Lira',\r\n  ZAR: 'South African Rand',\r\n  EUR: 'Euro',\r\n};\r\n\r\nexport const generateOptions = () =>\r\n  Object.entries(currencies)\r\n    .map(\r\n      ([currencyCode, currencyName]) =>\r\n        `<option value=\"${currencyCode}\">${currencyCode} - ${currencyName}</option>`\r\n    )\r\n    .join('');\r\n\r\nexport const formatCurrency = (amount, currency) =>\r\n  Intl.NumberFormat('en-EN', {\r\n    style: 'currency',\r\n    currency,\r\n  }).format(amount);\r\n","const endpoint = 'https://api.exchangeratesapi.io';\r\n\r\nexport async function getRatesByBase(base) {\r\n  try {\r\n    const res = await fetch(`${endpoint}/latest?base=${base}`);\r\n    const rates = await res.json();\r\n    return rates;\r\n  } catch (err) {\r\n    alert(err.message);\r\n  }\r\n}\r\n\r\nexport async function getRatesToCalculate(base, daysFromNow) {\r\n  if (!daysFromNow) {\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/latest?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      // console.log(rates);\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  } else if (daysFromNow > 0) {\r\n    const today = new Date();\r\n    const dayInThePast = new Date(today.setDate(today.getDate() - daysFromNow));\r\n    const queryString = Array.from(dayInThePast.toISOString())\r\n      .splice(0, 10)\r\n      .join('');\r\n\r\n    try {\r\n      const res = await fetch(\r\n        `${endpoint}/${queryString}?base=${base}&symbols=USD,GBP,EUR,CHF`\r\n      );\r\n      const rates = await res.json();\r\n      // console.log(rates);\r\n      return rates;\r\n    } catch (err) {\r\n      alert(err.message);\r\n    }\r\n  }\r\n}\r\n","import { getRatesByBase } from './api';\r\n\r\nconst ratesByBase = {};\r\n\r\nexport default async function convert(amount, from, to) {\r\n  if (!ratesByBase[from]) {\r\n    console.log(`we don't have rates for this currency, I have to fetch it!`);\r\n    const rates = await getRatesByBase(from);\r\n    ratesByBase[from] = rates;\r\n    console.log(ratesByBase);\r\n  }\r\n\r\n  const rate = ratesByBase[from].rates[to];\r\n  const converted = amount * rate;\r\n  console.log(`${amount} in ${from} is ${converted} in ${to}`);\r\n  return amount * rate;\r\n}\r\n","import { getRatesToCalculate } from './api';\r\n\r\nexport default async function calculate(from) {\r\n  const todayData = await getRatesToCalculate(from);\r\n  const yesterdayData = await getRatesToCalculate(from, 1);\r\n\r\n  const rateRatio = {};\r\n  Object.keys(todayData.rates).forEach(\r\n    currency =>\r\n      (rateRatio[currency] =\r\n        (todayData.rates[currency] - yesterdayData.rates[currency]) /\r\n        yesterdayData.rates[currency])\r\n  );\r\n\r\n  console.log(rateRatio);\r\n  return rateRatio;\r\n}\r\n","export function convertPercent(decimal) {\r\n  return Intl.NumberFormat('en-EN', {\r\n    style: 'percent',\r\n    minimumFractionDigits: 2,\r\n  }).format(decimal);\r\n}\r\n","import { generateOptions, formatCurrency } from './currencies';\r\nimport { getRatesByBase, getRatesToCalculate } from './api';\r\nimport convert from './convert';\r\nimport calculate from './calculateRates';\r\nimport { convertPercent } from './helpers';\r\n\r\nconst fromSelect = document.querySelector('#from-currency');\r\nconst toSelect = document.querySelector('#to-currency');\r\nconst ratesSelect = document.querySelector('#currency');\r\nconst amountInput = document.querySelector('#amount-input');\r\nconst amountOutput = document.querySelector('#amount-output');\r\nconst form = document.querySelector('.converter');\r\n\r\n// getRatesByBase('PLN');\r\n// getRatesToCalculate('PLN', 1);\r\ncalculate('PLN');\r\nconst percent = convertPercent(0.007576);\r\nconsole.log(percent);\r\nconst html = generateOptions();\r\nfromSelect.innerHTML = html;\r\ntoSelect.innerHTML = html;\r\nratesSelect.innerHTML = html;\r\n\r\nconst displayData = async () => {\r\n  const value = await convert(\r\n    amountInput.value,\r\n    fromSelect.value,\r\n    toSelect.value\r\n  );\r\n  const formatted = formatCurrency(value, toSelect.value);\r\n  console.log(formatted);\r\n  amountOutput.textContent = `${formatted}`;\r\n};\r\n\r\nform.addEventListener('input', displayData);\r\n"]}